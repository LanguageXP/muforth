( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2020 David Frech. (Read the LICENSE for details.)

loading STM32 serial bootloader support

( See AN3155, USART protocol used in the STM32 bootloader, for details.)

hex

( To make spying on the protocol easier to deal with, break up the printed
  bytes into "packets" in a semantically meaningful way. How about this
  stupid name, which is easy to remember:)

: ?spkt  ( spy packet, or "spiked")  spy @ if  cr  then ;

variable checksum
: sum!  checksum off ;
: sum  ( w)  checksum @  xor  checksum ! ;

: >b   dup sum  send ;
: b>            recv ;

( ACK is 79, NACK is 1f)
: ?ack
   b>
   dup 79 = if  drop ^  then
       1f = if   .ifdef bootloader-double-nack  b> drop  .then
          error" received NACK"  then
   error" unknown response from target" ;

: >sum    checksum @  >b  ?ack ; ( resets checksum to zero!)
: >cmd    ( cmd)  dup send  invert send  ?ack ;  ( send command and its inverse)
: >addr   ( a)  ( big-endian)  >0123  >b >b >b >b  >sum ;
: >count  ( n)  1- >b ;

( Command set)
: b.version       ( - version)
                             ?spkt  01 >cmd  b> b> b> 2drop  ?ack ;
: b.read-memory   ( a u)     ?spkt  11 >cmd  swap >addr  1- >cmd ; ( receive u bytes)
: b.go            ( a)       ?spkt  21 >cmd       >addr ;
: b.write-memory  ( a u)     ?spkt  31 >cmd  swap >addr  >count ;  ( send data and checksum, then ?ack)
: b.erase         ( ???)     ?spkt  43 >cmd ;  ( XXX incomplete)
: b.read-unprotect           ?spkt  92 >cmd  ?ack ?ack ;

: setup-chunk  ( buf a u - u a u)   rot m !  tuck ;

: b.hello
   checksum off  #115200 bps  even-parity  7f send  ?ack
   b.version  cr  ." Bootloader version "
   radix preserve hex  <#  #  char . hold  #  #> type  cr ;

: b.read-chunk  ( buf a u)
   setup-chunk  b.read-memory   for  b> m&  next ;

: b.write-chunk  ( buf a u)
   setup-chunk  b.write-memory  for  m* >b  next  >sum ;

: b.get-sp  dead_c0de ;
: b.set-sp  chat-fail ;
: b.run     chat-fail ;

( XXX Need a boot-via? We can't do tethered-style code execution using the
  serial bootloader. We can only jump to our application, never to return.)
: boot
   chat-via  b.hello  b.get-sp  b.set-sp  b.read-chunk  b.write-chunk  b.run ;
