( This file is part of muforth: http://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading ARM v6-M interaction

variable chatting

( XXX Don't define chat words unless there is support in a connected
  device.)

.ifdef t.chat

: +chat  chatting on ;

( XXX should be simpler? Not using a buffer?)
-:  ( target - word)  pad swap 4  t.read  pad lew@ ;

: >chat  [ ]         is |@  ( ARM only)
         ['] t.read  is |read
         ['] lew@    is |cell@  ( assume little-endian ARM)
                     32 |addr !  ( size of addr in bits)
                      4 |cell !  ( size of cell in bytes) ;

: chat  +chat  >chat  t.chat ;

.else  ( NO CONNECTED CHAT TARGET!)

: chat  error" No connected chat-capable target." ;
: >chat ;

.then


( Define our own key bindings for memory dumping and disassembly. We'll
  default to host bindings if there isn't one in our array. This way we
  only have to define the "delta" between host and target behaviours.)

128 array cortex-seekeys

( Default key action is to run host key code)
host-seekeys cortex-seekeys  128 cells cmove

: >target
   chatting @ if   >chat  ^  then  >image ;  ( set up memory access)

( Support for dumping memory)
: 1dump  ( a)
   hex-bytes
   dup  p !  cell*  -4 and  ea !  ( default ea: fetch cell and round down)
   dup _addr  dup .chars
   dup .addr  dup .hex-bytes
   dup _addr  dup .hex-cells
   drop ;

cortex-seekeys  -4  du-mode dumping    >target  skip+  skip-  1dump  ( a - a')
cortex-seekeys  -2  du-mode disasming  >target  dis+   dis-   1dis   ( a - a')

cortex-seekeys 'seekeys !    ( switch over to our bindings)

key: d  ( a - a 0)   dumping    0 ;
key: i  ( a - a 0)   disasming  0 ;

( Fetch a vector and start disassembling the code it points to. Treat it
  like a "call" - key c - and push the i-stack.)

key: v  ( 'vector - vector 0)  dup  p !  cell*  i-push  disasming  0 ;

host-seekeys 'seekeys !  ( back to host bindings)


( Interactive)
( make an alias so we can still get to host's du)
: _du  du ;

: du  ( a - a')    dumping    inspect ;
: dis  ( a - a')   disasming  inspect ;


( Batch mode)
( Redirect to stdout to make it easier to write output to a file.)
defer dump-line
: batch-dump  ( start limit cfa)  is dump-line
   >target  ( XXX should this be >image ?)
   out-channel preserve  >stdout
   radix preserve
   isp preserve  isp off
   begin  swap  dump-line drop  swap  2dup u< 0=  until  2drop ;

( XXX create/does> instead?)
-: ( a - a' 0)  dup 1dump  16 advance  0 ;
: dumps  ( start limit)   [ ]  batch-dump ;

-: ( a - a' 0)  dup 1dis   dis+ ;
: disses  ( start limit)  [ ]  batch-dump ;
