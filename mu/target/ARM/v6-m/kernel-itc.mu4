( This file is part of muforth: http://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading ARM v6-M Forth kernel (ITC)

( Bare bones kernel to test out remote execution.)

assembler
: dispatch   asm{{  { x } w ldm  x bx  }} ;
: next       asm{{  { w } ip ldm  dispatch  }} ;

: dpop1   ( reg)  0 reg>mask  asm{{  pop  }} ;
: dpush1  ( reg)  0 reg>mask  asm{{  push  }} ;
forth

__meta

code execute   ( cfa)        top w movs  begin  top dpop1  dispatch  ;c
code @execute  ( 'cfa)  0 top +) w ldr   again  ;c

code*    (branch)   [r]
label branch        0 ip +) ip ldr  ( follow branch)   next  ;c

( so we have something to test!)
code +     w dpop1  w top top adds  next  ;c
code xor   w dpop1  w top top eors  next  ;c

ram

( For debugging and interactive execution.)

( The host can push things onto host stack; they get copied to target
  stack, registers popped, words execute, re-push, copy back to host...
  Much easier than stuffing things into register slots on stack frame!)

code bug  [r]
   { top ip rp } push  0 bkpt  ;c

implements continue-forth  __asm
   { top ip rp } pop   dsb  isb  next  ;c

implements trampoline  ( x0 .. xn - y0 .. ym)
   ]  execute  begin  bug  again  [

__host

( Make it easy to get to the key target registers from meta.)
meta
: sp@   tsp @  2 \m cells  +  ;  ( skip IP and RP)
: rp@   trp @ ;
: ip@   tip @ ;
forth

( Show some indication of whether a word is still executing. If IP is
  anything other than two cells past trampoline, we've hit "bug" somewhere
  other than the trampoline. Show this by annotating IP with a "*".)

: executing?   ( ip - f)   [ \m trampoline @  2 \m cells + ]  - ;

: .ip
   \m ip@  dup .h32  executing? if  ." * "  ^  then  ( done)  2sp ;

: .sp
   \m sp@  .h32__ ;


-: ( forth version of .regs)
   cr  ."       SP        RP        IP"
       (  00000000  00000000  00000000 )
   cr          .sp   trp .tr       .ip ;
   is .regs


__meta


comment ~~examples~~
variable inc
: lala  do  i bug drop  inc @ +loop ;

( to demonstrate scripting target execution from the host)
meta: grog  ( start n)  0 do  \t 1+ remote  loop ;
( try: 44 10 grog)

~~examples~~

flash
