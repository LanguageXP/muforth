( This file is part of muforth: http://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading ARM Cortex-M meta-compiler (main)

( The various token consumers for each mode.)

-:  ."  (assembling)"  ;
-:
    .assembler. find  if  execute  ^  then
      .equates. find  if  execute  ^  then
         .meta. find  if  execute  ^  then  ( labels are in .meta.)
        .forth. find  if  execute  ^  then  ( utility words in .forth.)
                                            number ;
mode __asm

-:  ."  (compiling inlne assembler)"  ;
-:
    .assembler. find  if  ,        ^  then  ( find assembler's if/then etc)
     .compiler. find  if  execute  ^  then  ( need asm> and ; to exit this mode)
      .equates. find  if  ,        ^  then
         .meta. find  if  ,        ^  then  ( labels are in .meta.)
        .forth. find  if  ,        ^  then  ( utility words in .forth.)
                                            number literal ;
mode __inline-asm

( The meta-interpreter. We're in this mode when we're building the target
  image, and when in between [ and ] when running the target colon
  compiler.)

-:  ."  (meta)"  ;
-:
         .meta. find  if  execute  ^  then  ( labels are in .meta.)
      .equates. find  if  execute  ^  then
        .forth. find  if  execute  ^  then
                                            number ;
mode __meta

( Quick n dirty debug)
meta
: __host   \ [ ;
: label   \m here  current preserve  meta constant  __asm ;

assembler
: ;c   __meta ;

forth


-- ------------------------------------------------------------------------
-- Macros defining register convention and stack operations
-- ------------------------------------------------------------------------

( Support for inline asm in any colon word.)
compiler
: <asm   __inline-asm ;  ( start assembler)
: asm>      -] ;  ( exit assembler mode and restart colon compiler)
assembler


( So, let's get to work, defining some macros that will be useful either in
  programming in assembler but in a forth "style", or in writing an actual
  forth kernel.)

( The low 8 registers are a critical and scarce resource on Cortex
  processors, so use them wisely.)

\a r0 constant g0  ( general purpose scratch)
\a r1 constant g1
\a r2 constant g2
\a r3 constant g3

\a r12 constant u   ( user pointer)

.ifdef native
\a r4 constant cnt  ( loop count or scratch)
\a r5 constant k    ( load konstant register)
\a r6 constant t
\a r7 constant s    ( data stack pointer - points at empty slot)
\a sp constant r    ( return stack pointer)
: st1   <asm  0 s +)  asm> ;   ( first stack frame slot)
: st2   <asm  4 s +)  asm> ;   ( second stack frame slot)
: st3   <asm  8 s +)  asm> ;   ( third stack frame slot)

meta

( Basic stack macros.)
: dpush  ( reg)  <asm  4 # s s subs  st1 t str  asm> ;  ( NOTE: clobbers cond codes!)
: dpop   ( reg)  <asm  st1 t ldr  4 # s s adds  asm> ;  ( ditto!)

( Macros that make sense for Forth:)
: <dup>   <asm  t dpush  asm> ;  ( push top onto D stack)
: <drop>  <asm  t dpop   asm> ;   ( pop top of D stack into top)
: <nip>   <asm  4 # s s adds  asm> ;  ( XXX cond codes!)

forth

.else .ifdef token-itc  ( indirect-token-threaded)
( Nothing here yet)
.else z" You must define a threading type: native or token-itc." abort
.then .then


-- ------------------------------------------------------------------------
-- Support for in-line literals (literal pool, ARM-style)
-- ------------------------------------------------------------------------
32 array+ lit-values  ( room for 32 literals per word - value)
32 array+ ldr-addrs   ( room for 32 literals per word - ldr location)
variable #lits

: +lit    1 #lits +! ;
: -lit   -1 #lits +! ;
: lit-value   #lits @  lit-values ;
: ldr-addr    #lits @  ldr-addrs  ;
: lit,   ( value reg)  push  lit-value !  \m here ldr-addr !  +lit
         <asm  0 pc +) \f pop ldr  asm> ;

: nop-align  \m here 2 and if  <asm  nop  asm>  then ;
: rewrite-lit  ( lit#)  #lits !
   \m here  lit-value @  \m ,  ( 'lit)
   ldr-addr @  dup >load-pc  ( 'lit 'ldr pc)  rot swap -
   ( 'ldr offset)  2 >>  over image-@  or  swap image-! ;

: rewrite-lits
   #lits @ =if
      nop-align  ( lits have to start on word boundary)
      begin  1-  dup rewrite-lit  dup 0= until
   then  drop ;


-- ------------------------------------------------------------------------
-- Peephole optimiser
-- ------------------------------------------------------------------------
( Tags used:)
1 constant $lit1  ( one instruction lit: ldr or movs #)
2 constant $lit2  ( two instruction lit: movs+mvns or movs+lsls)
3 constant $call  ( $ suggests price tag ;-)

: tag!  ( tag)  \m here  image-h! ;
: tag@          \m here  image-h@ ;
: notag   -1 tag! ;  ( set to all ff's)

: is-lit-tag?  ( tag - f)  $call u< ;

: uncompile  ( #instrs)
   notag
   \m here  swap  for  -2  -1 ( 0ffff) over  image-h!  next  org ;


-- ------------------------------------------------------------------------
-- Smart jump, and tail call elimination
-- ------------------------------------------------------------------------

( Smart jump: compile short unconditional branch if possible;
  otherwise, ldr + bx.

  Smart call: compile bl if possible; otherwise, ldr + blx)

assembler
: j  ( dest)  
   dup  \m here  branch-offset  bra?  if  op,  drop  ^  then
   drop  1+ ( thumb!)  \a r0 lit,  <asm  r0 bx  asm> ;

: c  ( dest)  
   dup  \m here  branch-offset  bl?  if  op32,  drop  ^  then
   drop  1+ ( thumb!)  \a r0 lit,  <asm  r0 blx  asm> ;
forth

( If last code compiled was a call, rewrite it to a jump and return true;
  else return false.

  NOTE: 'then' should clobber tag so that  if b then ;  doesn't
  tail-convert the call to b and neglect to put a  bx lr  at the end of the
  word!)

( An unusual word that we haven't needed until now!)
: image-op32@  ( a - op32)
   dup image-h@ 16 <<  swap 2 + image-h@ + ;

: tail?  ( - f)
   tag@ $call = if  notag
      -4 \m allot  \m here  dup >branch-pc
      swap image-op32@  bl-offset@  ( op offset)  nip
      hoff>  +  ( dest)  \a j  -1  ^  then
   0 ;

meta-compiler
: ^   tail? if ^ then  <asm  lr bx  asm> ;

meta
: compile,  ( target-cfa)  \a bl  ( compile call)  $call tag! ;

forth

-- ------------------------------------------------------------------------
-- Literal loading
-- ------------------------------------------------------------------------

( Try three ways to load a literal:
  * movs k, #i8
  * movs k, #i8; mvns k, k
  * movs k, #i8; lsls k, k, #n
  Failing that, use  lit,  to compile an ldr from the literal pool.)

: load-literal  ( n - tag)
   "ffff_ffff and  ( we only care about 32 bits!)

   ( Try a simple movs)
   dup 8 ufits? if  <asm  # k movs  asm>  $lit1  ^  then

   ( Try movs followed by mvns)
   dup  "ffff_ffff xor
   dup 8 ufits? if  nip  <asm  # k movs  k k mvns  asm>  $lit2  ^  then
   drop ( inverted)

   ( Try movs followed by lsls)
   dup push  0 ( shift)  r@
   begin  u2/  1 u+  dup 8 ufits?  until ( n shifts shifted)
   2dup swap <<  pop = if  <asm  # k movs  # k k lsls  asm>  drop  $lit2  ^  then
   2drop

   ( No luck. Compile an ldr from literal pool.)
   \a k lit,  $lit1 ;


.ifdef later-gator

( With a literal loaded into the k register, push it onto the D stack.)
: push-literal   <asm  <dup>  k t mov  asm> ;
: unpush-literal  2 uncompile ;  ( back up over push and mov)

meta
: literal  ( n)  load-literal  ( tag)  push-literal  tag! ;

forth

-- ------------------------------------------------------------------------
-- Support for special literal versions of binops, relops, and memory ops
-- ------------------------------------------------------------------------

( Pop top of D stack into kl and kh just as if they were loaded by
  load-literal. This is used to make versions of binary operations that
  work either with true literals, or with a value sitting on the D stack.)

: pop-literal   <asm  k dpop  asm> ;

: got-lit?   ( f)
   tag@ is-lit-tag? =  dup if  unpush-literal  then ;

: _litop  current preserve  meta-compiler  create
          does>  got-lit?  if  cell+  then  @  \m compile, ;

meta
( NOTE: litbinop can only be used for commutative operations, since the
  stack entry point swaps top and k.)

: litbinop
   _litop
      \m here  ( stack entry point)  ,
      pop-literal
      \m here  ( literal entry point)  , ;

: litcompare
   _litop
      \m here  ( literal entry point)
      push-literal
      \m here  ( stack entry point)  ,  , ;

: litfetch
   _litop
      \m here  ( literal entry point)
      <asm  <dup>  k z movw  here 4 + rjmp }
      \m here  ( stack entry point)  ,  , ;

: litstore
   _litop
      \m here  ( literal entry point)
      <asm         k z movw  here 8 + rjmp }
      \m here  ( stack entry point)  ,  , ;

forth

( Finally, we have the definition of the target colon compiler.)

-:  ."  (compiling a target word)"  ;
-:  .meta-compiler. find  if  execute  ^  then
              .lex. find  if  execute  ^  then  ( comments and conditional compilation)
           .target. find  if  execute  \m compile, ^  then
          .equates. find  if  execute  \m literal  ^  then  ( chip equates create literals)
                               number  \m literal ;
mode __target-colon


( For simplicity, let's assume that _all_ or _none_ of the vectors are in
  the bootloader space. It's possible to move the reset vector
  independently of the others, but let's assume that we aren't going to!

  Second, assume that BOOTSZ bits - in the fuses - are set to the default
  setting, which sets aside 1/16 to 1/8 of the flash - depending on the
  device - for the bootloader.)

.ifdef bootloader
   .ifndef #boot
      z" The selected device doesn't support a separate bootloader memory space."
      abort
   .else
      #flash #boot -  constant @vectors  ( start of vectors)
   .then
.else  ( no bootloader)
   0  constant @vectors  ( start of vectors)
.then


( Interrupt vectors and handlers.)
: big-vectors?   [ #flash  16 Ki u< not ] ;
: *vector  ( vector# - offset)  big-vectors?  if  4 * ^  then  2* ;
: @vector  ( vector# - addr)  *vector  @vectors + ;

( Calculate the _offset_ past the vectors.)
: #vectors   [ \eq LAST_VECTOR 1+ *vector ] ;

: vector,  ( vector# dest)  ( compile jmp or rjmp to handler)
   swap  @vector org  big-vectors? if  \a jmp  ^  then  \a rjmp ;

( Return true if vector has _not_ been set. For two-word vectors - on
  devices with 16Ki and larger flash - assume that if first word - the jmp
  instruction - is unset that the vector is unset.)

: unvectored?  ( vector# - f)  @vector  image-@  "0ffff = ;

meta
: handler  ( vector#)  \m here  dup push  vector,  pop org  __asm ;

( Set all unset vectors to point to this vector - usually RESET.)
: default-handler  ( vector#)
   \m handler  ( force it, in case it's been set already)
   ( then set all unset handlers to this address)
   0  \eq LAST_VECTOR 1+  for
      dup unvectored? if  dup  \m handler  ( set it)  then  1+  next
   drop ;

forth


( Now that we know the origins of all the regions and the size and number
  of the vectors, let's make a word that gives us a clean slate.)

.ifdef bootloader
: skip-vectors   boot  [ @vectors #vectors + ]  org ;
.else
: skip-vectors    app  [ @vectors #vectors + ]  org ;
.then

: clean-slate
   wipe  ( erase both flash and eeprom images)
   0 ee!  @ram ram!  0 app!  @vectors boot! ;

clean-slate  skip-vectors


meta

( Create a new target names. A name is a target word which is defined as a
  _constant_ equal to its code field address, and which compiles itself
  when executed.)

: name    \m here  current preserve  target constant ;
: code    \m name  __asm ;
: :       \m name  __target-colon ;
: label   \m here  current preserve  meta constant  __asm ;

: -]   __target-colon ;
:  ]   \m literal  \m -] ;  ( XXX smart literal from ARM meta?)

( For forward references)
: forward    \m here  equ ;  ( precede with rjmp or rcall)
: resolve    ( src)  \m here  \a resolve> ;

( Use label to define the hook. Define with nop. Then resolve using hooks.)
: hooks   .meta. chain' execute
           \m here push  org  r@ \a rjmp  pop org ;

: '  .target. chain' execute ;  ( get target word's constant value)

: __host   \ [ ;  ( return to host forth mode)
: {        \m __host ;  ( useful for bracketing a few  host forth words)

forth
: }    __meta ;  ( return to meta)

assembler
: ;c   __meta ;

meta-compiler
: [   __meta ;
: ;   \mc ^  \mc [ ;  ( return to meta)

compiler
: ;m   \ ^  __meta ;     ( exit macro compilation and return to meta-compiler)

forth


( Alloting RAM space to variables. This does not create true Forth
  variables with executable code!)
( XXX keep?)
meta
: var   ( bytes)
   'ram @  dup equ  +  dup 'ram ! ( allot)
   @ram #ram +  swap u<  if error" No available ram"  then ;

forth

( Make it easy to check if a device register has been defined. If device
  equates move to somewhere other than .target. update this too.)
compiler
: .reg   .target. \ .contains ;
forth
: .reg   \ .reg ;


-- ------------------------------------------------------------------------
-- Signatures - how we built the target image 
-- ------------------------------------------------------------------------

meta
: string,  ( a u)
   h preserve  image preserve  app
   \m here image+ swap  ( a image u)  dup \m allot  cmove ;

: cr,  #LF \m c, ;  ( add a newline)
: z,     0 \m c, ;  ( add a zero terminator)

: sig"   char " parse  \m string,  \m cr, ;

forth

( based-on: creates words whose bodies are lists of addresses of words,
  just like colon words.)

here -]  \m cr, ;  ( end each created word with a call to cr, )
: based-on:  create  -]
   does>  [ ] push  ( 'body)  dup push  ( ip)
   body> >name
   \m string,  "   " \m string,
   ( run the rest of the create'd word) ;

meta

( muforth version)
based-on: muforth-commit
   muforth-commit  \m string, ;

( Timestamping with creation date.)
based-on: creation-date
   clock time"  \m string, ;

( Compile the command line into the image, prefixing it with "./muforth".)
based-on: build-command
   " ./muforth " \m string,
   command-line  count  \m string, ;

( Finishing the job.)
: end-sig
   \m z, ( terminate!)
   \m here 1 and if  \m z,  then  ( align!) ;

forth


( Forward references for control structure implementation words.)
( These are pointers to target CODE words.)
meta
variable (for)
variable (?for)
variable (next)
variable (do)
variable (loop)
variable (+loop)

forth

( looks up a label or forward-reference variable, and executes it to push
  its value or address)

: lookup  ( look up next token as forward-ref variable or label)
   .meta. chain' execute ( get addr) ;

( Fetch value of variable on stack - a primitive - and compile it if
  defined, and complain if not yet defined.)

: (p,)  ( var)
   @  =if  \m compile,  ^  then  error" primitive not yet defined" ;

compiler

( p, is a helper word that makes writing compiling words easier. It is used
  to compile a target primitive into a target word. But it doesn't do all
  the work at once. p, runs at the compile time of the compiling word. In
  that phase it consumes a token from the input, assumes it is a variable
  for a forward-referenced primitive, and compiles it; then it compiles
  (p,) ( which will do the rest of the work at the -run-time- of the
  compiling word!)

: p,   .meta. \chain  compile (p,) ;  ( XXX \ \m ?)

forth


( Looking up and changing values of target words.)
meta
: '   ( - target-cfa)  .target. chain' ;
: addr   \m '  \m cell+ ;  ( find word, skip cfa, return pfa)
: value  \m addr  \m @ ;   ( find word, skip cfa, read out value)
: is  ( target-cfa)    \m addr  \m ! ;


( Compile a linked name field into the target image.)

( The distinction between last and last-code is a bit subtle. last captures
  the cfa of the last word defined, no matter what kind of word it was.
  last-code captures the cfa of code fields that have a "bl" instruction
  compiled there, and that can be possibly "repointed" by a later ;code or
  does>. Keeping them separate makes me feel better.)

forth

variable last        ( cfa of last word defined)
variable last-code   ( for ;code and does> to fix up)
2variable last-link  ( address of vocab, link to newest word)

meta

meta-compiler
: [']  \m '  \m aliteral ;
meta

.meta. chain' literal  'target-literal !  ( patch colon compiler)
            ' number   'target-number  !  ( ditto - use host's number)

: equ   current preserve  labels  constant ;

: label     \m here  \m equ ;
: code      \m name  \m assemble ;
: new       \m name  \m code, ;  ( for words with code fields)

( implements looks up a forward-reference variable and stores the address
  of the last cfa there.)

: implements  last @  \f lookup  ! ;


( Support for making new defining words.)
forth
( (patch) ( rewrites the bl instruction at cfa to call to 'code.)
: (patch)   ( 'code cfa)  tuck >branch-offset  "eb000000 or ( op)
            swap \m ! ;

: patch   last-code @  (patch) ;

( This word, which is followed inline by a target code address, patches the
  code field of the last last word compiled with a bl to the inline target
  address. It essentially "repoints" previously defined words - defined by
  create, variable, constant, etc - to point to new code. It gets
  -compiled- indirectly by both ;calls and does>.)

: (;code@)   pop @  patch ;


( <;code> is used to switch from compiling -host- code [that will later run
  on the host, and build the target word] to compiling -target- code, that
  will run when words defined by this defining word later execute. In order
  to connect the two worlds, and to be able to patch up code fields to
  point to this newly-defined behaviour, <;code> captures the target's
  "here" value. Remember, we are about to start compiling target code at
  "here".

  <;code> runs at the compile time of a defining word, but it leaves it up
  to its caller - ;calls or does> - to change the interpreter mode.)

: <;code>   compile (;code@)  \m here  , ;


compiler
-- : does>   <;code>  save-lr  \m dodoes @ \a bl  \m -] ( start meta-colon) ;
: ;code   <;code>  \m assemble ( start assembler) ;

assembler
: ;c   __meta ;


-- ------------------------------------------------------------------------
-- Control structures.
-- ------------------------------------------------------------------------

: <test>               <asm  tl th or ( test)  asm> ;
: <zbranch>  ( - src)  <asm  0= not if  asm> ;

meta-compiler
: =if   ( - src)  <test>          <zbranch> ;
: if    ( - src)  <test>  <drop>  <zbranch> ;
: then  ( src)          \a then ;
: else  ( src0 - src1)  \a else ;

: begin   ( - dest)  \m here ;
: =until  ( dest -)  \mc =if  \a <resolve ;
: until   ( dest -)   \mc if  \a <resolve ;
: again   ( dest -)  \a again ;
: =while  ( dest - src dest)  \mc =if  swap ;
: while   ( dest - src dest)   \mc if  swap ;
: repeat  ( src dest -)   \mc again  \mc then ;

( n for .. next         goes n times; 4 billion+ if n=0 )
( n ?for .. next then   goes n times; 0 if n=0 )

meta
: <resolve  ." unimplemented" ;
: >mark  \m <resolve ;

meta-compiler
: for     ( - dest)      p,  (for)            \mc begin ;
: ?for    ( - src dest)  p, (?for)  \m >mark  \mc begin ;
: next    ( dest -)      p, (next)  \m >mark  \m <resolve ;

( do, loop, +loop)
: do      ( - src dest)   p, (do)     \m >mark  \mc begin ;
: loop    ( src dest)     p, (loop)   \m >mark  \m <resolve  \mc then ;
: +loop   ( src dest)     p, (+loop)  \m >mark  \m <resolve  \mc then ;
forth

-- ------------------------------------------------------------------------
-- Switching interpreter modes
-- ------------------------------------------------------------------------

( Making [ and ] work, finally.)
variable saved-state      ( interpreter mode we came from)
variable which-literal    ( the kind of literal to make when ] executes)

meta

: -]   saved-state @  state ! ;  ( return to saved state)
:  ]   \m -]  which-literal @execute ;

forth

: _[   ( 'literal)
        state @  saved-state !    ( so we know how to get back)
        which-literal !           ( so ] knows how to make a literal)
        __meta ;                  ( switch to __meta, not to host forth)

( Now define the different ways of leaving a colon compiler.)

( "Fix" host forth's [ and ; so they return to __meta)
compiler
: [          ['] literal  _[ ;   ( when we return, make a host literal)
: ;    \ ^   __meta ;
: [']  \m '  literal ;

meta-compiler
: [    'target-literal @  _[ ;   ( when we return, make a target literal)
: ^    p, ^  ;   ( compile target's ^ - EXIT)
: ;    \mc ^  __meta ;

forth

.then
