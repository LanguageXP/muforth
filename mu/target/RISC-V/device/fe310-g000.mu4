( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

loading Chip equates for SiFive FE310-G000

hex

2000_0000 constant @flash
   #16 Mi constant #flash
8000_0000 constant @ram
   #16 Ki constant #ram

( mcause exception codes:
Interrupt   Code  Description
   1         0–2  Reserved
   1           3  Machine software interrupt
   1         4–6  Reserved
   1           7  Machine timer interrupt
   1        8–10  Reserved
   1          11  Machine external interrupt
   1       12–15  Reserved

   0           0  Instruction address misaligned
   0           1  Instruction access fault
   0           2  Illegal instruction
   0           3  Breakpoint
   0           4  Load address misaligned
   0           5  Load access fault
   0           6  Store/AMO address misaligned
   0           7  Store/AMO access fault
   0        8–10  Reserved
   0          11  Environment call from M-mode
   0       12–31  Reserved )

( XXX Do I want separate base and offset definitions? Or do I want to
  "instantiate" versions of each peripheral, with register names like
  "UART0.txdata"? If I go the first route, the names of the offsets need a
  prefix (like "uart_"), which looks redundant.

  I'm not sure which I prefer.)

0000_0100 equ Debug_ROM
0000_1000 equ Mask_ROM
0002_0000 equ OTP_ROM
0200_0000 equ CLINT
0C00_0000 equ PLIC
1000_0000 equ AON
1000_8000 equ PRCI
1001_0000 equ OTP_Control
1001_2000 equ GPIO0
1001_3000 equ UART0
1001_4000 equ QSPI0_Control
1001_5000 equ PWM0
1002_3000 equ UART1
1002_4000 equ QSPI1
1002_5000 equ PWM1
1003_4000 equ QSPI2
1003_5000 equ PWM2

( XXX add CLINT and PLIC registers.)

( XXX just to get this to load - not sure I want them in the equates
  space:)
: preg   equ ;

-- --------------------------------------------------------------------------
-- AON block - always on
-- --------------------------------------------------------------------------

( Watchdog registers.)
000 preg wdogcfg
008 preg wdogcount
010 preg wdogs
018 preg wdogfeed
01C preg wdogkey
020 preg wdogcmp

( RTC registers.)
040 preg rtccfg
048 preg rtclo
04C preg rtchi
050 preg rtcs
060 preg rtccmp

( Low-frequency oscillator - LFROSC - register(s)
070 preg lfrosccfg      ( AON Clock Configuration.)

( Backup registers. FE310-G000 has 16 32-bit backup regs.)
080 preg backup0
0bc preg backup15
0c0 preg backup16       ( These are in the AON memory map but are)
0FC preg backup31       ( *not* implemented on the FE310-G000!)

( Power management unit - PMU - registers.)
100 preg pmuwakeupi0    ( Wakeup program instruction 0)
11c preg pmuwakeupi7    ( Wakeup program instruction 7)
120 preg pmusleepi0     ( Sleep program instruction 0)
13c preg pmusleepi7     ( Sleep program instruction 7)
140 preg pmuie          ( PMU interrupt enables)
144 preg pmucause       ( PMU wakeup cause)
148 preg pmusleep       ( Initiate sleep sequence)
14c preg pmukey         ( PMU key register)

-- --------------------------------------------------------------------------
-- end of AON block - always on
-- --------------------------------------------------------------------------

( PRCI registers.)
0000 preg hfrosccfg
0004 preg hfxosccfg
0008 preg pllcfg
000c preg plloutdiv

( GPIO registers.)
000 preg gpio_value        ( pin value)
004 preg gpio_input_en     ( pin input enable)
008 preg gpio_output_en    ( pin output enable)
00C preg gpio_port         ( output port value)
010 preg gpio_pue          ( internal pull-up enable)
014 preg gpio_ds           ( Pin Drive Strength)
018 preg gpio_rise_ie      ( rise interrupt enable)
01C preg gpio_rise_ip      ( rise interrupt pending)
020 preg gpio_fall_ie      ( fall interrupt enable)
024 preg gpio_fall_ip      ( fall interrupt pending)
028 preg gpio_high_ie      ( high interrupt enable)
02C preg gpio_high_ip      ( high interrupt pending)
030 preg gpio_low_ie       ( low interrupt enable)
034 preg gpio_low_ip       ( low interrupt pending)
038 preg gpio_iof_en       ( HW I/O Function enable)
03C preg gpio_iof_sel      ( HW I/O Function select)
040 preg gpio_out_xor      ( Output XOR (invert)

( PWM registers.)
000 preg pwmcfg
008 preg pwmcount
010 preg pwms
020 preg pwmcmp0
024 preg pwmcmp1
028 preg pwmcmp2
02C preg pwmcmp3

( UART registers.)
000 preg uart_txdata    ( Transmit data register)
004 preg uart_rxdata    ( Receive data register)
008 preg uart_txctrl    ( Transmit control register)
00C preg uart_rxctrl    ( Receive control register)
010 preg uart_ie        ( UART interrupt enable)
014 preg uart_ip        ( UART Interrupt pending)
018 preg uart_div       ( Baud rate divisor)

( QSPI registers.)
000 preg spi_sckdiv     ( Serial clock divisor)
004 preg spi_sckmode    ( Serial clock mode)
010 preg spi_csid       ( Chip select ID)
014 preg spi_csdef      ( Chip select default)
018 preg spi_csmode     ( Chip select mode)
028 preg spi_delay0     ( Delay control 0)
02C preg spi_delay1     ( Delay control 1)
040 preg spi_fmt        ( Frame format)
048 preg spi_txdata     ( Tx FIFO data)
04C preg spi_rxdata     ( Rx FIFO data)
050 preg spi_txmark     ( Tx FIFO watermark)
054 preg spi_rxmark     ( Rx FIFO watermark)
060 preg spi_fctrl      ( SPI flash interface control)
064 preg spi_ffmt       ( SPI flash instruction format)
070 preg spi_ie         ( SPI interrupt enable)
074 preg spi_ip         ( SPI interrupt pending)
