( This file is part of muforth: http://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading MSP430 bootstrap loader (BSL) support

hex

( Since checksumming is done on a 16-bit word basis, let's checksum by
  words rather than by alternating bytes.)

variable checksum
: sum!  0ffff checksum ! ;
: sum  ( w)  checksum @  xor  checksum ! ;

: >w   dup sum  >hilo  send send ;
: w>   recv recv  lohi>  dup sum ;

: >bb   ( lo hi)  lohi> >w ;
: bb>   ( - hi lo)      w> >hilo ;

: ?match  ( want got)  2dup = if  2drop ^  then
   ." expected "  .h8_  ." got " .h8_ ;

: >buf  ( buf u)  swap m !  1+ 2/ for  m* m* >bb  next ;
: buf>  ( buf u)  swap m !  1+ 2/ for  bb> m& m&  next ;

( For reading back memory from BSL.)
: hdr>  sum!  bb> 80 ?match  drop  bb> ?match ;
: chk>  w> drop  checksum @  0=  if ^ then
        error" bad checksum received" ;

: ?ack  recv  90 ?match ;
: sync  80 send  ?ack ;

: >length   dup >bb ;  ( Send length twice! Genius!)

: <bsl  ( length cmd)  sync  sum!  80 swap >bb  4 + >length ;
: bsl>  checksum @  >w ;

( Protocol commands. See Table 2-1, page 11, in SLAU319.

  Cmd   Command name    Direction    Password-protected?
  ===   =============   ==========   ===================
   10   RX password     host -> BSL  No
   12   RX data block   host -> BSL  Yes
   14   TX data block   BSL -> host  Yes
   16   Erase segment   n/a          Yes
   18   Mass erase      n/a          No
   1a   Load PC         n/a          Yes
)

( NOTE: Until further notice, we should not use mass-erase. As far as I
  can tell, it _will_ erase the information memory, which means we'll lose
  the factory calibration data. Perhaps try it with the parameters 04 0a5
  instead? These are the actual command bytes written to FCTL1. 02 is segment
  erase; 04 is erase all main memory; 06 is erase main+info if LOCKA 0.

  See SLAU144, Sec 7.4.1, p324.

  Since the BSL apparently _clears_ LOCKA, using 06 and doing a mass erase
  will erase the info memory.)

: bsl-unlock              20 10 <bsl  0 >w  0 >w  10 for  0ffff >w  next  bsl> ?ack ;
: bsl-unlock-image        20 10 <bsl  0 >w  0 >w  ffe0 image+ 20  >buf    bsl> ?ack ;
: bsl-txbuf  ( buf a u)  dup 12 <bsl  swap >w  dup >w  >buf  bsl>  ?ack ;
: bsl-rxbuf  ( buf a u)    0 14 <bsl  swap >w  dup >w        bsl>  hdr>  buf>  chk> ;
: bsl-erase  ( a fcmd)     0 16 <bsl  swap >w      >w        bsl>  ?ack ;
-- : mass-erase               0 18 <bsl  0 >w  0a506 >w      bsl> ;
: bsl-loadpc  ( pc)        0 1a <bsl       >w    0 >w        bsl>  ?ack ;


( Let's make sure we're not writing the flash inadvertently - until we know
  exactly what we're doing.)

: in-ram?  ( a - f)   @ram  dup #ram +  within ;
: bsl-txbuf-checked   ( buf a u)
   over in-ram? if  2dup + in-ram?  if  bsl-txbuf  ^  then  then
   cr  ." write to "  over u.  dup u.  ." blocked"  drop 2drop ;

( Do an operation in 64 byte chunks. This is compatible with the BSL
  protocol - which has a max payload of 250 bytes - and also with the
  process of writing the flash, which can be done by byte, word, or by
  64-byte block.)

variable 'doit  ( buf a u)
variable blow-chunks
: chunk  ( buf a u - buf+u a+u)  push
   blow-chunks @  if
      cr  ." chunk "  over u.  dup u.  r@ u.
   then
   2dup r@  'doit @execute  pop dup v+ ;

: chunked  ( buf a u 'code - buf+u a+u)  'doit !
   40 u/mod  ( r q)  swap push  for  40 chunk  next
                        pop =if  ( rem) chunk  ^  then  drop ;


( Naming convention note: All the following b.Foobar commands are the BSL
  _implementations_ of the chat command interface.)

: b.Hello  ( start things going)
   #9600 bps  ignore-parity  even-parity  bsl-unlock ;

: b.ReadWord  ( a - w)                 pad swap \m cell  bsl-rxbuf  pad leh@ ;
: b.WriteWord ( w a)    push  pad leh!  pad pop \m cell  bsl-txbuf-checked ;

: b.ReadChunk    ( buf a u)  ['] bsl-rxbuf          chunked  2drop ;
: b.WriteChunk   ( buf a u)  ['] bsl-txbuf-checked  chunked  2drop ;

( NOTE: fcmd already has FKEY set!)
( XXX sleazy status - always fine)
: b.ErasePage   ( a fcmd - status)
   bsl-erase  9658 ;

: b.FlashChunk  ( buf a u fcmd - status)
   drop  ['] bsl-txbuf  chunked  2drop  9658 ;

( The order, low to high: context status pc)
variable bsl-frame  ( chat frame is 6 bytes; this will fit into a variable!)
   dead_dead_dead_dead bsl-frame !
   220 bsl-frame .PC +  leh!  ( pretend PC is in RAM, so flash-image won't complain)

: b.GetRegs  ( buf - sp)      bsl-frame @  swap !  "0dead ;
: b.SetRegs  ( buf)        @  bsl-frame ! ;

: b.Run  bsl-frame .PC + leh@  bsl-loadpc ;

: bsl
   chat-via  b.Hello  b.GetRegs  b.SetRegs  b.ReadWord  b.WriteWord
             b.ReadChunk  b.WriteChunk  b.ErasePage  b.FlashChunk  b.Run ;
