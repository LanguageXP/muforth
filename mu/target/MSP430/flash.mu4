( This file is part of muforth: http://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading MSP430 flash programming

hex

.equates. .contains FCTL1 .if  ( chip has Flash memory!)

( The MSP430 has two areas of flash: main and info. Main memory is
  divided into 512 byte pages - which TI annoyingly calls "segments" -
  which are further divided into 64 byte rows - which TI annoyingly calls
  "blocks". Info memory is divided into 64-byte pages.

  A page is the unit of erasure. A row is a unit of exposure to "cumulative
  programming time". I think the way the flash code has been written that
  this isn't a problem, even doing word writes, rather than block/row writes.)

( XXX These are for main memory. Do we want to treat info memory separately?)
#512 constant /page   ( this is the erase size of main memory)
 #64 constant /row    ( max size of row to program)

: check-flash-status  ( status)
   ." FCTL3=" dup u.
   84 and if error" flash access or protection violation" then ;

: program-row  ( 'target len)
   cr ." program-row "  over u.  dup u.
   over image+ -rot  ( buf a u)
   [ \eq FWRT   \eq FKEY + ]  t.FlashChunk  check-flash-status ;

: erase-page  ( 'target)
   cr ." erase-page " dup u.
   [ \eq FERASE \eq FKEY + ]  t.ErasePage   check-flash-status ;

.else  ( no Flash. FRAM?)

( These are necessary for the code that checks to see if we need to flash
  the vectors. /row means nothing for FRAM parts, so let's set it to 256.)
#512 constant /page   ( this is the erase size of main memory)
#256 constant /row    ( max size of row to program)

: program-row  ( 'target len)
   cr ." program-row "  over u.  dup u.
   over image+ -rot  ( buf a u)  t.WriteChunk ;

: erase-page  ( 'target)
   cr ." erase-page (no-op) " u. ;

.then

: flash-buffer   pad  1 Ki  + ;    ( scratch space)
: blank?  ( addr - flag)
   cr ." blank? "  dup u.
   -1  swap  [ /page  100 / ] for  ( do it in chunks of 256)
      ( sum addr)  dup 100 flash-buffer -rot  t.ReadChunk  100 + swap
      ( addr+ sum)  flash-buffer m !  100 for  m* and  next  swap
      ( sum addr+)  over 0ff xor if  pop drop 2drop  0 ^  then  ( exit early)
   next  drop  0ff = ;

: erased  ( 'target)
   dup [ /page 1- ] and  if  drop ^  then  ( do nothing if not first byte)
   erase-page ;

: row  ( 'target len - 'target+len)
   2dup + push  over erased  program-row  pop ;

: flash-region  ( a len)
   /row /mod  ( r q)  swap push  for   /row row  next
                           pop  =if  ( rem) row  drop ^  then  2drop ;

( Check to see if we're going to clobber the bootloader and complain if
  we're not executing from RAM.)

: ?clobbering-loader
   @boot  \m here  u< not  if ^ then  ( not touching bootloader - Ok)
   .PC reg@  @ram  [ @ram #ram + ] within  if ^ then  ( running in RAM - Ok)
   error" You need to be running a RAM-based version of the chat code in
order to re-flash it. Consult a local guru. ;-)" ;

: ?clobbering-vectors
   @vectors  \m here  u< if
      error" Your boot code runs into the vectors. Are you sure this is right?"
   then ;

( Target address of first byte of the flash page containing the vectors.)
1_0000  /page -  constant @vector-page

: flash-image
   radix preserve hex
   h preserve  flash
   region ( a u)  ?clobbering-loader  ?clobbering-vectors  flash-region
   @vector-page  \m here  u< if
      cr ." flashing vectors"
      @vectors #vectors  flash-region
   then ;

( Be careful about setting p. Some chunked read implementations use it, so
  set it *after* doing the read.)

: verify-chunk  ( 'target len - 'target+len)
   cr ." verifying "  over u.  dup u.  ." : "
   2dup + push
   2dup flash-buffer -rot t.ReadChunk
   ( 'target len)  swap image+ m !  ( we'll use m* to read image)
   ( len)  flash-buffer swap
   for  c@+ swap  m*  xor  if  m @ image-  -1 +a u.  then  next  drop
   pop ;

( Do 256 bytes at a time. The chat protocol can only specify 255 words at a
  time.)

: verify-region
   100 /mod  ( r q)  swap push  for  100 verify-chunk  next
                        pop  =if  ( rem) verify-chunk  drop ^  then  2drop ;
: verify
   radix preserve hex
   h preserve  flash
   region ( a len)  verify-region  ( program image)
   @vector-page  \m here  u< if
      @vectors #vectors  verify-region
   then ;
