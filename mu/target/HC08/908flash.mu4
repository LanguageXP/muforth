( This file is part of muforth: http://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

loading HC908 Flash programming

hex

( Code to utilise the on-chip ROM-resident Flash programming routines in
  Freescale's HC908 microcontroller.)

( Read AN2635 and AN2874 for details.)

( from AN2635:
MCU Name         RAM GetByte PutByte RDVRRNG PRGRNGE ERARNGE DELNUS
MC68HC908QB4/QB8 $80   $2800   $280F   $2803  $2809   $2806   $280C )

( from AN2874:
  MCU     RAM PRGRNGE ERARNGE RDVRRNG GETBYTE DELNUS
QB4/8     $88   $2809   $2806   $2803   $2800  $280C )

#64 constant /page   ( QB have 64 byte pages, I think...)
#16 constant /row    ( decreed by existing Flash routines and the layout
                       of our byteloader code)

( ROM addresses of the Flash programming routines.)
2803 constant 'verify-range
2806 constant 'erase-range
2809 constant 'program-range

( HX points to first byte of data to Flash.)
88 constant control-block
   1 6 << constant mass-erase
        0 constant page-erase
-- 89 constant cpu-speed    ( 4*bus_speed_in_mhz, rounded up to nearest int)
-- 8a constant lastH   ( Last address to program - 1)
-- 8b constant lastL
8c constant write-buffer  ( 1-16 bytes of data to write to Flash)

( NOTE: the ROM routines can write up to 32 bytes at a time, but in the
  interest of more comfortably fitting our byteloader around the control
  block, in the limited RAM of the 908QB8, we only allow room for 16
  bytes.)


: control-block!  control-block t.SetAddr ;
: write-buffer!   write-buffer  t.SetAddr ;


-- Rescue mode -----------------------------------------------------------

( This is only for use when 908 is messed up and use of "forced monitor
  mode" is necessary. This means that there is a 9.8304M or 4.9152M clock
  signal connected to OSC1, and nIRQ is at TST voltage - above 7v. We only
  use rescue mode to do two things: do a mass erase, and program the
  oscillator trim byte. Once this is done, the chip can be used in "normal"
  monitor mode again.)

: rescue-flash-setup  ( 'target len erase-cmd 'code )
   ( write PC to stack frame) pc!
   control-block!
      ( erase-cmd) t.Write
                #5 t.Write ( running @ 4.9152M)
   over + 1-  >lohi  t.Write  t.Write  ( last addr)
   ( write HX to stack frame:) hx! ;

: rescue-mass-erase
   0ffbe ( flash protect register)  1 ( bogus length)
   mass-erase  'erase-range  rescue-flash-setup  _runwait ;

: rescue-trim   ( trim)
   write-buffer! t.Write
   0ffc0 1 0 'program-range rescue-flash-setup  _runwait ;

-- -----------------------------------------------------------------------

: flash-setup  ( 'target 'len 'code)
   ( write PC to stack frame) pc!
   control-block!
       0 t.Write ( page erase)
     #18 t.Write ( running @ 18.432M) 
   over + 1-  >lohi  t.Write  t.Write  ( last addr)
   ( write HX to stack frame:)
   ( 'target) hx! ;

: copy-row  ( 'image len)
   swap image+ m !
   write-buffer!  for  m* t.Write  next ;

( Flash a row of 16 bytes or less.)
: program-row  ( 'target len)
   cr ." program-row "  2dup swap u. u.
   2dup copy-row
   'program-range flash-setup  _runwait ;

( The length - from which we calc last-addr for the control block - doesn't
  matter for erase-range. The ROM routine always erases an entire page;
  also HX can point anywhere in the page.)

: erase-page  ( 'target)
   cr ." erase-page " dup u.
   1 'erase-range flash-setup  _runwait ;

: blank?  ( addr - flag)
   cr ." blank? "  dup u.
   t.SetAddr  -1  /page  for  t.Read and  next  0ff = ;

( When we are about to program the _first_ row of a page, we erase the page.)
: erased  ( 'target)
   dup [ /page 1- ] and  if  drop ^  then  ( do nothing if not first byte)
   erase-page ;

: row  ( 'target len - 'target+len)
   2dup + push  over erased  program-row  pop ;

: flash-region  ( a len)
   /row /mod  ( r q)  swap push  for  /row row  next
                         pop  =if   ( rem) row  drop ^  then  2drop ;

( Where is the bootloader code?)
@flash #flash +  1 Ki 2/ -  constant @boot

( Check to see if we're going to clobber the bootloader and complain if
  we're not executing from RAM.)

: ?clobbering-loader  ( a u - a u)
   2dup +  @boot  swap u< not  if ^ then  ( not touching bootloader - Ok)
   pc@  [ @ram #ram + ] u<  if ^ then  ( running in RAM - Ok)
   error" You need to be running a RAM-based version of the chat code in
order to re-flash it. Consult a local guru. ;-)" ;

: flash-image
   h preserve  flash
   region ( a u)   ?clobbering-loader  flash-region ;

( On 908, erasing the vectors means erasing the TRIM byte, so we copy it
  before erasing the last page.)

: copy-trim  ( save from the wrecking ball)
   cr ." copy-trim"
   0ffc0 dup t.SetAddr  t.Read  swap image-c! ;

( I could flash all the vectors, but I only use the reset.)
: flash-vectors
   copy-trim
   0ffc0 erase-page     ( trim & vectors)
   0ffc0 1 program-row  ( trim)
   0fffe 2 program-row  ( reset vector) ;

( XXX This is a bit of a hack, but seems to work.)
: verify-region
   over t.SetAddr  swap image+ m !
   for  m* t.Read xor  if  m @ image-  -1 +a u.  then  next ;

: verify
   h preserve  flash
   region ( a u)  verify-region  ( program image)
   0ffc0 40       verify-region  ( trim & vectors) ;
