( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2019 David Frech. (Read the LICENSE for details.)

( Quick and dirty HTML generator. Takes in a file of markup -- consisting
  of tokens and directives -- and copies the tokens verbatim while
  "executing" the directives, thereby generating an output file. In this
  case it will an HTML rendering of the document.)

sealed .block-markup.
sealed .inline-markup.

compiler
: \b   ( compile from block-markup)     .block-markup. \chain ;
: \i   ( compile from inline-markup)   .inline-markup. \chain ;
forth

variable space-before  ( points to nope or space)
: +space   ['] space  space-before ! ;
: -space   ['] nope   space-before ! ;  -space
: ?space   space-before @execute ;

: html-escape-char  ( ch)
   dup  char & = if  drop  ." &amp;"       ^  then
   dup  char < = if  drop  ." &lt;"        ^  then
   dup  char > = if  drop  ." &gt;"        ^  then
   emit ;

: html-rsquo-escape-char  ( ch)
   dup  char ' = if  drop  ." &rsquo;"     ^  then  ( hack)
   html-escape-char ;

: foreach  ( a u 'code)
   swap for
      push  c@+ swap  r@ execute  pop
   next  2drop ;

: html         ( a u)   ['] html-escape-char  foreach ;
: html-rsquo   ( a u)   ['] html-rsquo-escape-char  foreach ;

( XXX need to escape URIs too! The following doesn't really work -- it
  doesn't do enough!)
: uri   html ;

compiler
: .(   \ (")  char ) string, drop  \ type ;  ( XXX should this be html?)
forth

variable @line-prev  -1 @line-prev !
: initial?  ( - f)  ( is this the first token on the line?)
   @line @line-prev @ = 0=  @line @line-prev ! ;

defer default-block

-: ."  (markup to HTML)" ;
-: ( a u)
   initial? if
      .block-markup. find if  execute  ^  then
      skipped if
         c@ #LF = if  ( at least one blank line)  default-block  then
         0
      then  drop
   then
   .inline-markup. find if  execute  ^  then
   ?space  +space  html-rsquo ;
mode __html

: markup
   out-channel preserve  >stdout
   state preserve  __html
   token,  raw-load-file ;

: .open   ( z")   .( <)   count type  .( >) ;
: .close  ( z")   .( </)  count type  .( >) ;

( Given the address of a memory cell, invert the value in the cell and
  return its new value.)

: toggle  ( a - new)  dup  @ invert  dup rot ! ;

( Now for the interesting bits!)

: inline
   create  0 , ( toggle)  token, drop ( element)
   does>  push ( body)  r@ toggle
   pop cell+ cell+ ( element)  swap
   if  ?space  .open   -space  ^  then
               .close  +space ;

: .self   body> >name type ;

: closing-punct   create  does>          .self  +space ;
: opening-punct   create  does>  ?space  .self  -space ;

.inline-markup. definitions

inline __ em
inline ** strong
inline || code

closing-punct .
closing-punct ,
closing-punct ;
closing-punct :
closing-punct !
closing-punct ?
closing-punct )

opening-punct (

( Doin it TeX style?)
: ``  ?space  ." &ldquo;"  -space ;
: ''          ." &rdquo;"  +space ;

: '           ." &rsquo;"  -space ;

: -    ."  &ndash;"  +space ;
: --   \i - ;
: ---  ."  &mdash;"  +space ;  ( if you *really* want it)

here 0 ,  ( unnamed variable for toggling inside/outside of quote)
: "   [ #] toggle  if  \i ``  ^  then  \i '' ;

: [[   ?space  .( <a href=")  token uri  .( ">)  -space ;
: ]]   .( </a>)  +space ;

forth

variable block-elem  block-elem off

: <cr>
   block-elem @ ?if  .close  then  cr  -space ;

: block   ( z")
   <cr>  dup block-elem !  ?if  .open  then ;

( XXX should heading instead just echo words until another kind of block
  markup comes along and closes the heading?)
: heading
   create
   does>
      body> >name nip 1+ push ( heading level)
      ctrl J parse  ( grab whole line)  0 block
      .( <h)  r@ (.) type
      -- .(  id=")  2dup .heading-id  .( ")
      .( >)  html-rsquo  .( </h)  pop (.) type  .( >) ;

-: ( para)  z" p" block ;  is default-block

.block-markup. definitions

( XXX Still missing <pre> and any way to do bulleted lists.)

: __host  \ [ ;

heading #
heading ##
heading ###
heading ####

: ----   0 block  .( <hr />) ;

forth


-- --------------------------------------------------------------------------
-- Some markup to test the generator with.
-- --------------------------------------------------------------------------

.ifdef test

>stdout  __html

# Introduction

Let's test it out. Do we ignore # when it's not the first token on the line?
How about ---- ?

  A para with mixed whitespace at the start of the line.

## Inline markup

Here is some plain text. How about __ emphasized __ , or ** bolded ** text?
Or even a || monospaced code font || ?

What about __ ** both ** __ ?

It's easy - if you want it --- to get en- and em-dashes too.

### TeX-style quotes

`` In double quotes '' but this is not. `` A quote '' , followed by punctuation.

### Toggle-style quotes

" Also in double quotes " followed by some unquoted text.

### Even links work!

[[ https://www.nimblemachines.com/2019/ 2019 journal ]] is a link.

----

## The hard parts: verbatim/pre-formatted code blocks and lists

Do we want to use " code fences " , like || {{ || and || }} || , or use as
a trigger for verbatim/pre mode the presence of non-newline whitespace
(spaces and tabs) at the beginning of the line?

I never use numbered (ordered) lists, so let's concentrate on bulleted
(unordered) exclusively. The easiest way to write these is a bullet ( " o "
or " * " or " - " ) at the beginning of the line, perhaps preceded by whitespace,
which we can use to calculate the nesting.

__host

.then  ( test)
