( This file is part of muforth: http://muforth.nimblemachines.com/

  Copyright 2002-2017 David Frech. (Read the LICENSE for details.)

( Fiddle around with the console colour palette, on Linux.)

48 buffer palette  ( 16 colours, one byte each of R, G, B)

: get-palette   0 "4b70 palette ioctl ;
: set-palette   0 "4b71 palette ioctl ;

: >pal  ( n - offset)  3 *  palette + ;
: pal!  ( r g b n)    >pal push  r@ 2 + c!  r@ 1+ c!  pop c! ;
: pal@  ( n - r g b)  >pal push  r@ c@  r@ 1+ c@  pop 2 + c@ ;

( from colorforth code:)
( terminal ESC sequences)
: <esc  <#  char m hold ;
: esc>  char [ hold  ctrl [ hold  0  #> type ;

: attrib   #s drop ;
: attrib;  attrib  char ; hold ;

( NOTE: 39 sets default fg; 49 default bg)
: color  ( bright foregd backgd)
   radix preserve  decimal
   <esc  40 + attrib;  30 + attrib;  attrib  esc> ;

( Sequence of each subset of 8 colors.
  Index, in binary, is 421
                       bgr)

0 constant black    ( +black = grey)
1 constant red
2 constant green             (   4       2      1 )
3 constant yellow   ( -blue  =         green + red)
4 constant blue
5 constant magenta  ( -green = blue          + red)
6 constant cyan     ( -red   = blue  + green      )
7 constant white

( Generate a new palette.)
( Four byte values: floor ceil +floor +ceil)
variable component  "dd77_aa55 component !  ( Little-endian hack!)

: comp@  ( 'component exists - color 'component)
   over swap if  1+  then  c@  swap ;

: get-components  ( i - r g b)
   push  component
   r@ 8 and if  2 +  then  ( use "bright" versions)
   r@ 1 and comp@ ( red)
   r@ 2 and comp@ ( green)
   pop 4 and comp@ ( blue)
   drop ;

( Generate a new palette.)
: gen
   ( black is special)  0 0 0  0 pal!
   16 1 do  i get-components  i pal!  loop ;

compiler  ( We want to print a string with embedded " chars.)
: .string   \ (")  \f char string,  drop  \ type ;
forth
: .rgb   ( r g b)  rot .h8  swap .h8  .h8 ;
: .rgb_  .rgb space ;

( Export a palette so we can use set-console-colors to set it.)
: export-linux
   out-channel preserve  >stdout
   .string }
# Put this into your .bash_login or .profile.

# If we are on a Linux console, set the colors to something decent.
if [ "$TERM" = "linux" ]; then
    # Sequence (+color is bright) is:
    # black red green yellow blue magenta cyan white
    # grey +red +green +yellow +blue +magenta +cyan +white

    ~/set-console-colors \
        }
    8 0 do  i pal@  .rgb_  loop  ." \
        "
   16 8 do  i pal@  .rgb_  loop  ."

fi
"  ;

( HTML-style RGB color.)
: .#rgb_   ." #" .rgb_ ;

( Export a palette suitable for inclusion on nimblemachines.com.)
: export-nm
   out-channel preserve  >stdout
    8 0 do  i pal@  .#rgb_  loop  cr
   16 8 do  i pal@  .#rgb_  loop  cr ;

( Quoted HTML-style RGB color for JS array.)
: ."#rgb   char " emit  ." #" .rgb  char " emit ;
: ,_   ." , " ;

( Export a palette to use with the ChromeOS terminal emulator, hterm. It
  needs to be in the format of a Javascript array with quoted RGB colors.)
: export-json
   out-channel preserve  >stdout
   cr  ." [ "
    8 0 do  i pal@  ."#rgb ,_  loop  cr
   15 8 do  i pal@  ."#rgb ,_  loop
           15 pal@  ."#rgb  ."  ]"  cr ;

( Show all colors.)
: +fg  ( bright color8)  9  color ;
: fg  ( n)  8 /mod swap  ( bright color8)  +fg ;
: .color  ( n)  dup fg  7 and  char 0 + dup emit emit ;
: cc  16 0 do  i .color  loop  0 9 9 color  ( back to defaults) ;

( Test "close" colors. These pairs - red + magenta, green + cyan, yellow +
  white - all differ in that one has a blue component, and the other lacks
  blue. For good measure, I put the two pure blues in there as well.)

: tt
   cr  0 red +fg  ."  red "   0 magenta +fg  ."  magenta "
       0 green +fg  ."  green "  0 cyan +fg  ."  cyan "
       0 blue +fg  ."  blue "
       0 yellow +fg  ."  yellow "  0 white +fg  ."  white"
   cr  1 red +fg  ." +red "   1 magenta +fg  ." +magenta "
       1 green +fg  ." +green "  1 cyan +fg  ." +cyan "
       1 blue +fg  ." +blue "
       1 yellow +fg  ." +yellow "  1 white +fg  ." +white"
   0 9 9 color ;
