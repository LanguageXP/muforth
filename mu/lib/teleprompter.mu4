( This file is part of muforth: http://muforth.nimblemachines.com/

  Copyright 2002-2018 David Frech. (Read the LICENSE for details.)

( This is code to make it easier to paste into the command line, one by one
  and in sequence, previously-written chunks of text. It can be especially
  useful for making screencasts, so that the viewer isn't stuck watching the
  author painfully type and correct.

  It's a bit like command-line history - and, in fact, the question
  suggests itself of whether teleprompter lines should be added to the
  history? - or if the teleprompter texts should simply be a set of pre-added
  history lines? - but I think the cleanest approach is to simply paste the
  *next* teleprompter line every time a special key - ^N? - is pressed.

  Since command lines can only be 255 characters long it makes sense to use
  a byte-sized - rather than cell-sized - count, just as with command-line
  history.)

: ~  ( compile a new text line)
   #LF parse  ( a u)  255 min
   dup here c!+ ( copy and skip byte count)
   over 1+ allot  ( allot space for count+string; allot pads to cell boundary)
   swap cmove  ( copy into dict) ;

variable tp  ( teleprompter pointer)

: tp-show-next  ( len idx - len' idx')
   2drop  tp @  c@+ swap  ( a len)
   =if  2dup + aligned  tp !  then  ( skip to next prompt, if count != 0)
   tuck  cl-show  dup ;

( Hook into editline code. When we see a ^N, paste in the next prompt.)
-: ( len idx key - len' idx' exit?)
   ctrl N = if  tp-show-next  then  0 ;  is cl-key-unmatched

( Here is an example teleprompter sequence.)

here  tp !
~ In the beginning was the Forth
~ And the Forth was with Chuck
~ And the Forth *was* Chuck
~ (the very short Gospel of Forth)
~ It's possible to execute code as well as show text.
~ Just press return when the command line contains code.
~ ld lib/rational-approx.mu4  phi
~ That last bit of code just calculated two integer factors
~ that when divided yield phi (the golden ratio) to
~ 9 decimal digits of precision!
0 ,

